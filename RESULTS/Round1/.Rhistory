participantdata$difficulty <- surveydata$difficulty[r3]
participantdata$comments <- surveydata$comments[r3]
r4 <- match(participantdata$manual_ID, prolificdata$participant_id)
participantdata$session_id <- prolificdata$session_id[r4]
participantdata$prolific_ID <- prolificdata$participant_id[r4]
participantdata$status <- prolificdata$status[r4]
participantdata$started_datetime <- prolificdata$started_datetime[r4]
participantdata$completed_date_time <- prolificdata$completed_date_time[r4]
participantdata$time_taken <- prolificdata$time_taken[r4]
participantdata$prolific_age <- prolificdata$age[r4]
participantdata$num_approvals <- prolificdata$num_approvals[r4]
participantdata$num_rejections <- prolificdata$num_rejections[r4]
participantdata$prolific_score <- prolificdata$prolific_score[r4]
participantdata$reviewed_at_datetime <- prolificdata$reviewed_at_datetime[r4]
participantdata$entered_code <- prolificdata$entered_code[r4]
participantdata$country_of_birth <- prolificdata$Country.of.Birth[r4]
participantdata$current_country_of_residence <- prolificdata$Current.Country.of.Residence[r4]
participantdata$employment_status <- prolificdata$Employment.Status[r4]
participantdata$first_language_1 <- prolificdata$First.Language[r4]
participantdata$first_language_2 <- prolificdata$First.language[r4]
participantdata$nationality <- prolificdata$Nationality[r4]
participantdata$prolific_sex <- prolificdata$Sex[r4]
participantdata$student_status <- prolificdata$Student.Status[r4]
r5 <- match(participantdata$manual_ID, surveydata2$Your.Prolific.ID)
replace_these <- which(is.na(r5)==FALSE)
participantdata$goal[replace_these] <- as.character(surveydata2[r5[replace_these],3])
participantdata$rule[replace_these] <- as.character(surveydata2[r5[replace_these],4])
participantdata$aha[replace_these] <- ifelse(surveydata2[r5[replace_these],5]=="Yes", TRUE, FALSE)
participantdata$difficulty[replace_these] <- as.numeric(surveydata2[r5[replace_these],6])
participantdata$comments[replace_these] <- as.character(surveydata2[r5[replace_these],7])
# Reorder conditions
participantdata$condition <- factor(participantdata$condition , levels=conditions_ordered)
View(participantdata)
# Reorder conditions
participantdata$condition <- factor(participantdata$condition , levels=conditions_ordered)
factor(participantdata$condition , levels=conditions_ordered)
# The number of initiated sessions
sessions <- max(vpndata$index, na.rm=TRUE) + sum(is.na(vpndata$index))
# Merged participant data: success, vpndata, surveydata, prolificdata
participantdata <- data.frame(
index = 1:sessions,
prolific_action = NA)
conditions_ordered <- c("wlin", "wlout", "wnol", "wnolfs", "wnola", "moonsq", "wonly")
r1 = match(participantdata$index, success[,2])
participantdata$resultfile <- success[r1, 6]
participantdata$condition <- as.factor(success[r1, 3])
participantdata$solver <- success[r1, 4]
participantdata$wentback <- success[r1, 5]
r2 <- match(participantdata$index, vpndata$index)
participantdata$manual_ID <- vpndata$ID[r2]
participantdata$manual_age <- vpndata$age[r2]
participantdata$manual_sex <- vpndata$sex[r2]
participantdata$vision <- vpndata$vision[r2]
participantdata$colorblindness <- ifelse(vpndata$colorblindness[r2]=="not color blind", FALSE, TRUE)
r3 <- match(participantdata$index, surveydata$index)
participantdata$goal <- surveydata$goal[r3]
participantdata$rule <- surveydata$rule[r3]
participantdata$aha <- ifelse(surveydata$aha[r3]=="yes aha", TRUE, FALSE)
participantdata$difficulty <- surveydata$difficulty[r3]
participantdata$comments <- surveydata$comments[r3]
r4 <- match(participantdata$manual_ID, prolificdata$participant_id)
participantdata$session_id <- prolificdata$session_id[r4]
participantdata$prolific_ID <- prolificdata$participant_id[r4]
participantdata$status <- prolificdata$status[r4]
participantdata$started_datetime <- prolificdata$started_datetime[r4]
participantdata$completed_date_time <- prolificdata$completed_date_time[r4]
participantdata$time_taken <- prolificdata$time_taken[r4]
participantdata$prolific_age <- prolificdata$age[r4]
participantdata$num_approvals <- prolificdata$num_approvals[r4]
participantdata$num_rejections <- prolificdata$num_rejections[r4]
participantdata$prolific_score <- prolificdata$prolific_score[r4]
participantdata$reviewed_at_datetime <- prolificdata$reviewed_at_datetime[r4]
participantdata$entered_code <- prolificdata$entered_code[r4]
participantdata$country_of_birth <- prolificdata$Country.of.Birth[r4]
participantdata$current_country_of_residence <- prolificdata$Current.Country.of.Residence[r4]
participantdata$employment_status <- prolificdata$Employment.Status[r4]
participantdata$first_language_1 <- prolificdata$First.Language[r4]
participantdata$first_language_2 <- prolificdata$First.language[r4]
participantdata$nationality <- prolificdata$Nationality[r4]
participantdata$prolific_sex <- prolificdata$Sex[r4]
participantdata$student_status <- prolificdata$Student.Status[r4]
r5 <- match(participantdata$manual_ID, surveydata2$Your.Prolific.ID)
replace_these <- which(is.na(r5)==FALSE)
participantdata$goal[replace_these] <- as.character(surveydata2[r5[replace_these],3])
participantdata$rule[replace_these] <- as.character(surveydata2[r5[replace_these],4])
participantdata$aha[replace_these] <- ifelse(surveydata2[r5[replace_these],5]=="Yes", TRUE, FALSE)
participantdata$difficulty[replace_these] <- as.numeric(surveydata2[r5[replace_these],6])
participantdata$comments[replace_these] <- as.character(surveydata2[r5[replace_these],7])
# Reorder conditions
#participantdata$condition <- factor(participantdata$condition , levels=conditions_ordered)
# Reorder conditions
participantdata$condition <- factor(participantdata$condition , levels=conditions_ordered)
# Chunk 1: Setup and parameters
# Packages
library(knitr)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
library(openxlsx)
knitr::opts_chunk$set(echo = FALSE)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/Round1/" # the directory of the data files from Step 1
datafile = "_Step1_output.RData"
rated_data = "_free_text_answers_agreed.xlsx"
samplesize = 78 # sample size per group
# Load data
load(paste(datadir, datafile, sep=""))
rates <- read.xlsx(paste(datadir, rated_data, sep=""))
r6 = match(participantdata_inc$index, rates$index)
participantdata_inc$rule_code <- rates$agreed.rule[r6]
participantdata_inc$numbers4letters <- rates$`Letter.rule.expained.with."numbers"`
# Chunk 1: Setup and parameters
# Packages
library(knitr)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
library(openxlsx)
knitr::opts_chunk$set(echo = FALSE)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/Round1/" # the directory of the data files from Step 1
datafile = "_Step1_output.RData"
rated_data = "_free_text_answers_agreed.xlsx"
samplesize = 78 # sample size per group
# Load data
load(paste(datadir, datafile, sep=""))
rates <- read.xlsx(paste(datadir, rated_data, sep=""))
r6 = match(participantdata_inc$index, rates$index)
participantdata_inc$rule_code <- rates$agreed.rule[r6]
participantdata_inc$numbers4letters <- rates$`Letter.rule.expained.with."numbers"`
# participantdata_inc$exclude <- rates$Exclude
participantdata_inc$numbers4letters
participantdata_inc$numbers4letters <- rates$Letter.rule.expained.with.numbers
# Chunk 1: Setup and parameters
# Packages
library(knitr)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
library(openxlsx)
knitr::opts_chunk$set(echo = FALSE)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/Round1/" # the directory of the data files from Step 1
datafile = "_Step1_output.RData"
rated_data = "_free_text_answers_agreed.xlsx"
samplesize = 78 # sample size per group
# Load data
load(paste(datadir, datafile, sep=""))
rates <- read.xlsx(paste(datadir, rated_data, sep=""))
r6 = match(participantdata_inc$index, rates$index)
participantdata_inc$rule_code <- rates$agreed.rule[r6]
participantdata_inc$numbers4letters <- rates$Letter.rule.expained.with.numbers
# participantdata_inc$exclude <- rates$Exclude
# Chunk 1: Setup and parameters
# Packages
library(knitr)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
library(openxlsx)
knitr::opts_chunk$set(echo = FALSE)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/Round1/" # the directory of the data files from Step 1
datafile = "_Step1_output.RData"
rated_data = "_free_text_answers_agreed.xlsx"
samplesize = 78 # sample size per group
# Load data
load(paste(datadir, datafile, sep=""))
rates <- read.xlsx(paste(datadir, rated_data, sep=""))
r6 = match(participantdata_inc$index, rates$index)
participantdata_inc$rule_code <- rates$agreed.rule[r6]
participantdata_inc$numbers4letters <- rates$Letter.rule.expained.with.numbers
# participantdata_inc$exclude <- rates$Exclude
# Chunk 1: Setup and parameters
# Packages
library(knitr)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
library(openxlsx)
knitr::opts_chunk$set(echo = FALSE)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/Round1/" # the directory of the data files from Step 1
datafile = "_Step1_output.RData"
rated_data = "_free_text_answers_agreed.xlsx"
samplesize = 78 # sample size per group
# Load data
load(paste(datadir, datafile, sep=""))
rates <- read.xlsx(paste(datadir, rated_data, sep=""))
# Chunk 1: Setup and parameters
# PACKAGES
library(knitr)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
library(openxlsx)
knitr::opts_chunk$set(echo = FALSE)
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/Round1/" # the directory where you put all the files from the server
url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSkn-qNdPGKO3yf9LU3ed4WA_-XeM-3z7PecwM3-3A2tp1TeRJO8oZp4vAaoJjQY6FoclK77pi1Ixt7/pub?output=csv" # URL of the Google form with the survey answers that were collected after the experiment
# Chunk 2: Read data sources
# Read data from common files
setwd(datadir)
vpndata <- read.table(paste(datadir, "vpn.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("index", "ID", "age", "sex", "vision", "colorblindness"),
colClasses = c("integer", "factor", "integer", "factor", "factor", "factor"))
surveydata <- read.table(paste(datadir, "survey.txt", sep=""),
header = FALSE, sep = "|", fill=TRUE,  quote = "",
col.names = c("condition", "index", "goal", "rule", "aha", "difficulty", "comments"),
colClasses = c("factor", "integer", "character", "character", "factor", "numeric", "character"))
surveydata2 <- read.csv(url)
timestampdata <- read.table(paste(datadir, "time.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("condition", "index", "event", "timestamp"),
colClasses = c("factor", "integer", "factor", "character"))
prolificfile <- list.files(datadir, pattern = "prolific_export_*" )
prolificdata <- read.csv(paste(datadir, prolificfile, sep=""),
header = TRUE)
# Read data from resultfiles and calculate some variables
resultfiles <- list.files(datadir, pattern = "*Results.txt" )
movedata <- c()
success <- data.frame(
order = 1:length(resultfiles),
index = NA,
condition = NA,
solver = NA,
wentback = NA,
resultfile = NA
)
for (i in 1:length(resultfiles))
{
d <- read.table(paste(datadir, resultfiles[i], sep=""),
header = FALSE, sep = ",",
colClasses = c("factor", "integer", "integer", "factor", "factor", "logical", "integer", "integer", "numeric"),
na.strings = "null")
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]) == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3])))  {
wentback <- TRUE
} else {
wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
}
colnames(movedata) <- c("condition", "index", "trial", "src_card", "tar_card", "match", "mv_time", "total_time", "timestamp")
# Chunk 3: Modify and merge data frames
# The number of initiated sessions
sessions <- max(vpndata$index, na.rm=TRUE) + sum(is.na(vpndata$index))
# Merged participant data: success, vpndata, surveydata, prolificdata
participantdata <- data.frame(
index = 1:sessions,
prolific_action = NA)
conditions_ordered <- c("wlin", "wlout", "wnol", "wnolfs", "wnola", "moonsq", "wonly")
r1 = match(participantdata$index, success[,2])
participantdata$resultfile <- success[r1, 6]
participantdata$condition <- as.factor(success[r1, 3])
participantdata$solver <- success[r1, 4]
participantdata$wentback <- success[r1, 5]
r2 <- match(participantdata$index, vpndata$index)
participantdata$manual_ID <- vpndata$ID[r2]
participantdata$manual_age <- vpndata$age[r2]
participantdata$manual_sex <- vpndata$sex[r2]
participantdata$vision <- vpndata$vision[r2]
participantdata$colorblindness <- ifelse(vpndata$colorblindness[r2]=="not color blind", FALSE, TRUE)
r3 <- match(participantdata$index, surveydata$index)
participantdata$goal <- surveydata$goal[r3]
participantdata$rule <- surveydata$rule[r3]
participantdata$aha <- ifelse(surveydata$aha[r3]=="yes aha", TRUE, FALSE)
participantdata$difficulty <- surveydata$difficulty[r3]
participantdata$comments <- surveydata$comments[r3]
r4 <- match(participantdata$manual_ID, prolificdata$participant_id)
participantdata$session_id <- prolificdata$session_id[r4]
participantdata$prolific_ID <- prolificdata$participant_id[r4]
participantdata$status <- prolificdata$status[r4]
participantdata$started_datetime <- prolificdata$started_datetime[r4]
participantdata$completed_date_time <- prolificdata$completed_date_time[r4]
participantdata$time_taken <- prolificdata$time_taken[r4]
participantdata$prolific_age <- prolificdata$age[r4]
participantdata$num_approvals <- prolificdata$num_approvals[r4]
participantdata$num_rejections <- prolificdata$num_rejections[r4]
participantdata$prolific_score <- prolificdata$prolific_score[r4]
participantdata$reviewed_at_datetime <- prolificdata$reviewed_at_datetime[r4]
participantdata$entered_code <- prolificdata$entered_code[r4]
participantdata$country_of_birth <- prolificdata$Country.of.Birth[r4]
participantdata$current_country_of_residence <- prolificdata$Current.Country.of.Residence[r4]
participantdata$employment_status <- prolificdata$Employment.Status[r4]
participantdata$first_language_1 <- prolificdata$First.Language[r4]
participantdata$first_language_2 <- prolificdata$First.language[r4]
participantdata$nationality <- prolificdata$Nationality[r4]
participantdata$prolific_sex <- prolificdata$Sex[r4]
participantdata$student_status <- prolificdata$Student.Status[r4]
r5 <- match(participantdata$manual_ID, surveydata2$Your.Prolific.ID)
replace_these <- which(is.na(r5)==FALSE)
participantdata$goal[replace_these] <- as.character(surveydata2[r5[replace_these],3])
participantdata$rule[replace_these] <- as.character(surveydata2[r5[replace_these],4])
participantdata$aha[replace_these] <- ifelse(surveydata2[r5[replace_these],5]=="Yes", TRUE, FALSE)
participantdata$difficulty[replace_these] <- as.numeric(surveydata2[r5[replace_these],6])
participantdata$comments[replace_these] <- as.character(surveydata2[r5[replace_these],7])
# Reorder conditions as factor (does not reorder rows in the data frame)
participantdata$condition <- factor(participantdata$condition , levels=conditions_ordered)
# Chunk 4: Calculate variables per move
# Create think_time variable
movedata <- mutate(movedata, think_time = total_time - mv_time)
# Create variables to see if participants used one of the standard rules
movedata <- mutate(movedata,
matching_shape=NA,
matching_color=NA,
matching_number=NA)
for (r in 1:nrow(movedata)){
movedata[r,"matching_shape"] = substr(movedata[r,4],1,1)==substr(movedata[r,5],1,1)
movedata[r,"matching_color"] = substr(movedata[r,4],2,2)==substr(movedata[r,5],2,2)
movedata[r,"matching_number"] = substr(movedata[r,4],3,3)==substr(movedata[r,5],3,3)
}
# Chunk 5: Calculate variables per participant
# Summarize movedata
sum_movedata <- movedata %>%
group_by(index) %>%
summarize(
Nbof_moves = max(trial),
Task_time = sum(total_time)/1000/60, #mins spent with the game
Mean_total_time = mean(total_time), #ms mean total trial time
Mean_move_time = mean(mv_time), #ms mean move time
Mean_think_time = mean(think_time) # ms mean think time
)
# Merge sum_movedata with participantdata
r6 <- match(participantdata$index, sum_movedata$index)
participantdata$nbof_moves <- sum_movedata$Nbof_moves[r6]
participantdata$task_time <- sum_movedata$Task_time[r6]
participantdata$mean_total_time <- sum_movedata$Mean_total_time[r6]
participantdata$mean_move_time <- sum_movedata$Mean_move_time[r6]
participantdata$mean_think_time <- sum_movedata$Mean_think_time[r6]
# Chunk 6: Exclude participants
# Exclude invalid cases
participantdata_f1 <- filter(participantdata, duplicated(manual_ID)==FALSE)  # who played the game 2x (delete all attempts after the 1st)
participantdata_f2 <- filter(participantdata_f1, is.na(manual_ID)==FALSE)      # who did not fill out the datasheet
participantdata_f3 <- filter(participantdata_f2, is.na(resultfile)==FALSE)  # who did not start the game
participantdata_f4 <- filter(participantdata_f3, wentback==FALSE)           # who went back to the instructions page after making some moves in the game
participantdata_f5 <- filter(participantdata_f4, is.na(aha)==FALSE)        # who did not fill out survey
participantdata_f6 <- filter(participantdata_f5, colorblindness==FALSE)     # who checked color-blindness
participantdata_inc <- filter(participantdata_f6, (country_of_birth == "CONSENT REVOKED")==FALSE) # who revoked consent
# Who did not get to survey (quit game early or did not press continue button after timeout, or the server froze)
# consent revoked, timed out, returned could be also people who gave up - could correlate with the difficulty of the task
no_survey <- filter(participantdata_f6, is.na(aha))
# Exclusion reasons for Prolific feedback
actions <- rep.int(NA, sessions)
temp <- is.element(participantdata$index, participantdata_inc$index)
actions[which(temp)] <- "PAY"
temp <- is.na(participantdata$aha)
actions[which(temp)] <- "quit"
temp <- duplicated(participantdata$manual_ID)
actions[which(temp)] <- "played_twice"
temp <- participantdata$country_of_birth == "CONSENT REVOKED"
actions[which(temp)] <- "revoked_consent"
temp <- participantdata$wentback
actions[which(temp)] <- "refreshed"
temp <- is.na(participantdata$resultfile)
actions[which(temp)] <- "quit"
temp <- participantdata$colorblindness
actions[which(temp)] <- "colorblind"
temp <- is.na(participantdata$manual_ID)
actions[which(temp)] <- "quit"
participantdata$prolific_action <- actions
# Excluded participants
participantdata_exc <- participantdata %>%
filter(is.element(index, participantdata_inc$index) == FALSE) %>%
arrange(prolific_ID)
participant_todo <- participantdata %>%
filter(status == "AWAITING REVIEW") %>%
select(prolific_ID, prolific_action) %>%
arrange(prolific_ID)
temp <- filter(participant_todo, prolific_action == "PAY")
approved_list <- temp$prolific_ID # this can be copid to Prolific for batch approve
manually_reject <- filter(participant_todo, prolific_action != "PAY")
# exclude invalid cases and those who gave up from the other datasets too
timestampdata_inc <- timestampdata %>%
filter(is.element(index, participantdata_inc$index)) %>%
arrange(index, timestamp)
prolificdata_inc <- prolificdata %>%
filter(is.element(participant_id, participantdata_inc$manual_ID)) %>%
arrange(participant_id)
movedata_inc <- movedata %>%
filter(is.element(index, participantdata_inc$index)) %>%
arrange(index)
# Chunk 7: Summarize conditions
partic_groups <- participantdata_inc %>%
group_by(condition) %>%
summarize(
Nbof_participants = n_distinct(index),
Nbof_solvers = sum(solver),
Nbof_nonsolvers = Nbof_participants - Nbof_solvers,
Failure_rate = Nbof_nonsolvers / Nbof_participants,
Solution_rate = Nbof_solvers/Nbof_participants,
Nbof_ahas = sum(aha),
Aha_rate = Nbof_ahas/Nbof_participants,
Nbof_ahas_solvers = sum(solver*aha),
Aha_rate_solvers = Nbof_ahas_solvers / Nbof_solvers,
Avg_task_time = mean(task_time),
Avg_nbof_moves = mean(nbof_moves)
)
partic_groups <- arrange(partic_groups, factor(condition, levels = c("wlin", "wlout", "wnol", "wnolfs", "wnola", "moonsq", "wonly")))
partic_groups_rownames <- tibble::column_to_rownames(partic_groups, "condition")
kable(partic_groups[,c(1, 2, 10, 5, 11, 12)],
digits = 3,
col.names = c("Condition", "Number of participants", "Aha rate of solvers", "Failure rate", "Avg task time", "Avg number of moves"))
# Chunk 8: Saving and printing
# Print participantdata for human reading
openxlsx::write.xlsx(participantdata_inc, file=paste(datadir, "_included_participants.xlsx", sep=""),
sheetName = "Sheet1", col.names = TRUE, append = FALSE)
# Print free text answers for human rating
free_text_answers <- participantdata_inc %>%
arrange(condition) %>%
select(index, condition, solver, aha, difficulty, goal, comments, rule)
openxlsx::write.xlsx(free_text_answers, file=paste(datadir, "_free_text_answers.xlsx", sep=""),
sheetName = "Sheet1", col.names = TRUE, append = FALSE)
# Save dataframes
save(
movedata, no_survey, participantdata_inc,
file = "_Step1_output.RData"
)
save.image()
# Chunk 1: Setup and parameters
# Packages
library(knitr)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
library(openxlsx)
knitr::opts_chunk$set(echo = FALSE)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/Round1/" # the directory of the data files from Step 1
datafile = "_Step1_output.RData"
rated_data = "_free_text_answers_agreed.xlsx"
samplesize = 78 # sample size per group
# Load data
load(paste(datadir, datafile, sep=""))
rates <- read.xlsx(paste(datadir, rated_data, sep=""))
r6 = match(participantdata_inc$index, rates$index)
participantdata_inc$rule_code <- rates$agreed.rule[r6]
participantdata_inc$numbers4letters <- rates$Letter.rule.expained.with.numbers
#participantdata_inc <- filter(participantdata_inc, participantdata_inc$exclude == 1) # who will be included in data analysis
WLIN <- filter(participantdata_inc, condition=="wlin")[1:samplesize,]
WLOUT <- filter(participantdata_inc, condition=="wlout")[1:samplesize,]
WNOL <- filter(participantdata_inc, condition=="wnol")[1:samplesize,]
WNOLFS <- filter(participantdata_inc, condition=="wnolfs")[1:samplesize,]
WNOLA <- filter(participantdata_inc, condition=="wnola")[1:samplesize,]
MOONSQ <- filter(participantdata_inc, condition=="moonsq")[1:samplesize,]
WONLY <- filter(participantdata_inc, condition=="wonly")[1:samplesize,]
participantdata_inc <- rbind(WLIN, WLOUT, WNOL, WNOLFS, WNOLA, MOONSQ, WONLY)
partic_groups <- participantdata_inc %>%
group_by(condition) %>%
summarize(
Nbof_participants = n_distinct(index),
Nbof_solvers = sum(solver),
Nbof_nonsolvers = Nbof_participants - Nbof_solvers,
Failure_rate = Nbof_nonsolvers / Nbof_participants,
Solution_rate = Nbof_solvers/Nbof_participants,
Nbof_ahas = sum(aha),
Aha_rate = Nbof_ahas/Nbof_participants,
Nbof_ahas_solvers = sum(solver*aha),
Aha_rate_solvers = Nbof_ahas_solvers / Nbof_solvers,
Avg_task_time = mean(task_time),
Avg_nbof_moves = mean(nbof_moves)
)
partic_groups <- arrange(partic_groups, factor(condition, levels = c("wlin", "wlout", "wnol", "wnolfs", "wnola", "moonsq", "wonly")))
partic_groups2 <- tibble::column_to_rownames(partic_groups, "condition")
kable(partic_groups[,c(1, 2, 10, 5, 11, 12)],
digits = 3,
col.names = c("Condition", "Number of participants", "Aha rate of solvers", "Failure rate", "Avg task time", "Avg number of moves"))
# Chunk 1: Setup and parameters
# Packages
library(knitr)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
library(openxlsx)
knitr::opts_chunk$set(echo = FALSE)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/Round1/" # the directory of the data files from Step 1
datafile = "_Step1_output.RData"
rated_data = "_free_text_answers_agreed.xlsx"
samplesize = 78 # sample size per group
# Load data
load(paste(datadir, datafile, sep=""))
rates <- read.xlsx(paste(datadir, rated_data, sep=""))
r6 = match(participantdata_inc$index, rates$index)
participantdata_inc$rule_code <- rates$agreed.rule[r6]
participantdata_inc$numbers4letters <- rates$Letter.rule.expained.with.numbers
# participantdata_inc$exclude <- rates$Exclude
