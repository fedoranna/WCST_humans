resultfile = NA
)
i=1
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3]))){
wentback <- TRUE
} else {
wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
colnames(movedata) <- c("condition", "index", "trial", "src_card", "tar_card", "match", "mv_time", "total_time", "timestamp")
i=2
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3]))){
wentback <- TRUE
} else {
wentback <- FALSE}
movedata <- rbind(movedata, d)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/results_prolific.pilot_4/"
# Read data from common files
setwd(datadir)
vpndata <- read.table(paste(datadir, "vpn.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("index", "ID", "age", "sex", "vision", "colorblindness"))
surveydata <- read.table(paste(datadir, "survey.txt", sep=""),
header = FALSE, sep = "|", fill=TRUE,  quote = "",
col.names = c("condition", "index", "goal", "rule", "aha", "difficulty", "comments"))
timestampdata <- read.table(paste(datadir, "time.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("condition", "index", "event", "timestamp"))
prolificfile <- list.files(datadir, pattern = "prolific_export_*" )
prolificdata <- read.csv(paste(datadir, prolificfile, sep=""),
header = TRUE)
# Read data from resultfiles
resultfiles <- list.files(datadir, pattern = "*Results.txt" )
movedata <- c()
success <- data.frame(
order = 1:length(resultfiles),
index = NA,
condition = NA,
solver = NA,
wentback = NA,
resultfile = NA
)
i=1
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3]))){
wentback <- TRUE
} else {
wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
i=2
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3]))){
wentback <- TRUE
} else {
wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3]))){
wentback <- TRUE
} else {
wentback <- FALSE}
movedata <- rbind(movedata, d)
movedata
d
movedata <- rbind(movedata, d)
i=1
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
d
names(d)
summary(d)
type(d$V2)
class(d$V2)
class(d$V2[1])
d$V2[1]
d$V2[1]+1
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3])))  {
wentback <- TRUE
} else {
wentback <- FALSE}
d1=s
d1
d1=d
d1
i=2
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3])))  {
wentback <- TRUE
} else {
wentback <- FALSE}
d2=d
View(d1)
View(d2)
i
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""),
header = FALSE, sep = ",",
colClasses = c("factor", "factor", "integer", "factor", "factor", "logical", "numeric", "numeric", "POSIXct"))
d <- read.table(paste(datadir, resultfiles[i], sep=""),
header = FALSE, sep = ",",
colClasses = c("factor", "factor", "integer", "factor", "factor", "logical", "numeric", "numeric", "numeric"))
View(d)
i=1
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""),
header = FALSE, sep = ",",
colClasses = c("factor", "factor", "integer", "factor", "factor", "logical", "integer", "integer", "numeric"))
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/results_prolific.pilot_4/"
# Read data from common files
setwd(datadir)
vpndata <- read.table(paste(datadir, "vpn.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("index", "ID", "age", "sex", "vision", "colorblindness"))
surveydata <- read.table(paste(datadir, "survey.txt", sep=""),
header = FALSE, sep = "|", fill=TRUE,  quote = "",
col.names = c("condition", "index", "goal", "rule", "aha", "difficulty", "comments"))
timestampdata <- read.table(paste(datadir, "time.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("condition", "index", "event", "timestamp"))
prolificfile <- list.files(datadir, pattern = "prolific_export_*" )
prolificdata <- read.csv(paste(datadir, prolificfile, sep=""),
header = TRUE)
# Read data from resultfiles
resultfiles <- list.files(datadir, pattern = "*Results.txt" )
movedata <- c()
success <- data.frame(
order = 1:length(resultfiles),
index = NA,
condition = NA,
solver = NA,
wentback = NA,
resultfile = NA
)
for (i in 1:length(resultfiles))
{
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""),
header = FALSE, sep = ",",
colClasses = c("factor", "factor", "integer", "factor", "factor", "logical", "integer", "integer", "numeric"))
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3])))  {
wentback <- TRUE
} else {
wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
}
colnames(movedata) <- c("condition", "index", "trial", "src_card", "tar_card", "match", "mv_time", "total_time", "timestamp")
# Summarize movedata
sum_movedata <- movedata %>%
group_by(index) %>%
summarize(
Nbof_moves = max(trial),
Mean_move_time = mean(mv_time), #ms
Mean_total_time = mean(total_time), #ms
Mean_thinking_time = Mean_total_time - Mean_move_time, # ms
Task_time = sum(total_time)/1000/60, #min
)
View(movedata)
# ## Change $match to logical
# correct <- ifelse(movedata$match=="true",TRUE,FALSE)
# movedata <- mutate(movedata, match=correct)
# The number of initiated sessions
sessions <- max(timestampdata$index, na.rm=TRUE) + sum(is.na(vpndata$index))
# Merged participant data
participantdata <- data.frame(
index = 1:sessions,
autocondition = rep_len(c("wlin", "wlout", "wnol", "wnola", "moonsq", "wnolfs"), sessions))
r1 = match(participantdata$index, success[,2])
participantdata$resultfile <- success[r1, 6]
participantdata$condition <- success[r1, 3]
participantdata$solver <- success[r1, 4]
participantdata$wentback <- success[r1, 5]
r2 <- match(participantdata$index, vpndata$index)
participantdata$manual_ID <- vpndata$ID[r2]
participantdata$manual_age <- vpndata$age[r2]
participantdata$manual_sex <- vpndata$sex[r2]
participantdata$vision <- vpndata$vision[r2]
participantdata$colorblindness <- ifelse(vpndata$colorblindness[r2]=="not color blind", FALSE, TRUE)
r3 <- match(participantdata$index, surveydata$index)
participantdata$goal <- surveydata$goal[r3]
participantdata$rule <- surveydata$rule[r3]
participantdata$aha <- ifelse(surveydata$aha[r3]=="yes aha", TRUE, FALSE)
participantdata$difficulty <- surveydata$difficulty[r3]
participantdata$comments <- surveydata$comments[r3]
r4 <- match(participantdata$manual_ID, prolificdata$participant_id)
participantdata$session_id <- prolificdata$session_id[r4]
participantdata$prolific_ID <- prolificdata$participant_id[r4]
participantdata$status <- prolificdata$status[r4]
participantdata$started_datetime <- prolificdata$started_datetime[r4]
participantdata$completed_date_time <- prolificdata$completed_date_time[r4]
participantdata$time_taken <- prolificdata$time_taken[r4]
participantdata$prolific_age <- prolificdata$age[r4]
participantdata$num_approvals <- prolificdata$num_approvals[r4]
participantdata$num_rejections <- prolificdata$num_rejections[r4]
participantdata$prolific_score <- prolificdata$prolific_score[r4]
participantdata$reviewed_at_datetime <- prolificdata$reviewed_at_datetime[r4]
participantdata$entered_code <- prolificdata$entered_code[r4]
participantdata$country_of_birth <- prolificdata$Country.of.Birth[r4]
participantdata$current_country_of_residence <- prolificdata$Current.Country.of.Residence[r4]
participantdata$employment_status <- prolificdata$Employment.Status[r4]
participantdata$first_language_1 <- prolificdata$First.Language_1[r4]
participantdata$first_language_2 <- prolificdata$First.language_2[r4]
participantdata$nationality <- prolificdata$Nationality[r4]
participantdata$prolific_sex <- prolificdata$Sex[r4]
participantdata$student_status <- prolificdata$StudentStatus[r4]
r5 <- match(participantdata$index, sum_movedata$index)
participantdata$nbof_moves <- sum_movedata$Nbof_moves[r5]
participantdata$mean_move_time <- sum_movedata$Mean_move_time[r5]
participantdata$mean_total_time <- sum_movedata$Mean_total_time[r5]
participantdata$mean_thinking_time <- sum_movedata$Mean_thinking_time[r5]
participantdata$task_time <- sum_movedata$Task_time[r5]
# Exclude invalid cases, pay the rest of the participants
all_participantdata <- participantdata
participantdata <- all_participantdata %>%
filter(is.na(resultfile)==FALSE) %>% # who did not start the game
filter(wentback==FALSE) %>% # who went back to the instructions page after making some moves in the game
filter(colorblindness==FALSE) %>% # who checked color-blindness
filter((country_of_birth == "CONSENT REVOKED")==FALSE) %>% # who revoked consent
filter(duplicated(manual_ID)==FALSE) # who played the game 2x (delete all attempts after the 1st)
# who played the game during a pilot based on prolific_ID !!!
# who did not get to survey (quit game early or did not press continue button after timeout) - count these as GAVE UP!!!
gave_up <- filter(participantdata, is.na(aha))
participantdata <- filter(participantdata, is.na(aha)==FALSE)
# any other criteria based on timestamps?
all_timestampdata <- arrange(timestampdata, index)
timestampdata <- timestampdata %>%
filter(is.element(index, participantdata$index)) %>%
arrange(index, timestamp)
all_prolificdata <- prolificdata
prolificdata <- prolificdata %>%
filter(is.element(participant_id, participantdata$manual_ID)) %>%
arrange(participant_id)
all_movedata <- movedata
movedata <- movedata %>%
filter(is.element(index, participantdata$index)) %>%
arrange(index)
partic_groups <- participantdata %>%
group_by(condition) %>%
summarize(
Nbof_participants = n_distinct(index),
Nbof_solvers = sum(solver),
Solution_rate = Nbof_solvers/Nbof_participants,
Avg_task_time = mean(task_time),
Avg_nbof_moves = mean(nbof_moves)
)
View(all_participantdata)
View(participantdata)
View(success)
sessions
# Merged participant data
participantdata <- data.frame(
index = 1:sessions,
autocondition = rep_len(c("wlin", "wlout", "wnol", "wnola", "moonsq", "wnolfs"), sessions))
r1 = match(participantdata$index, success[,2])
participantdata$resultfile <- success[r1, 6]
participantdata$condition <- success[r1, 3]
participantdata$solver <- success[r1, 4]
participantdata$wentback <- success[r1, 5]
participantdata$index
success[,2]
View(d)
# Chunk 1: setup
# PACKAGES
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/results_prolific.pilot_4/"
# Read data from common files
setwd(datadir)
vpndata <- read.table(paste(datadir, "vpn.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("index", "ID", "age", "sex", "vision", "colorblindness"))
surveydata <- read.table(paste(datadir, "survey.txt", sep=""),
header = FALSE, sep = "|", fill=TRUE,  quote = "",
col.names = c("condition", "index", "goal", "rule", "aha", "difficulty", "comments"))
timestampdata <- read.table(paste(datadir, "time.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("condition", "index", "event", "timestamp"))
prolificfile <- list.files(datadir, pattern = "prolific_export_*" )
prolificdata <- read.csv(paste(datadir, prolificfile, sep=""),
header = TRUE)
# Read data from resultfiles
resultfiles <- list.files(datadir, pattern = "*Results.txt" )
movedata <- c()
success <- data.frame(
order = 1:length(resultfiles),
index = NA,
condition = NA,
solver = NA,
wentback = NA,
resultfile = NA
)
for (i in 1:length(resultfiles))
{
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""),
header = FALSE, sep = ",",
colClasses = c("factor", "integer", "integer", "factor", "factor", "logical", "integer", "integer", "numeric"),
na.strings = "null")
# Solved the task?
if (nrow(d)>17){
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
} else {
s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3])))  {
wentback <- TRUE
} else {
wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
}
colnames(movedata) <- c("condition", "index", "trial", "src_card", "tar_card", "match", "mv_time", "total_time", "timestamp")
# Summarize movedata
sum_movedata <- movedata %>%
group_by(index) %>%
summarize(
Nbof_moves = max(trial),
Mean_move_time = mean(mv_time), #ms
Mean_total_time = mean(total_time), #ms
Mean_thinking_time = Mean_total_time - Mean_move_time, # ms
Task_time = sum(total_time)/1000/60, #min
)
# ## Change $match to logical
# correct <- ifelse(movedata$match=="true",TRUE,FALSE)
# movedata <- mutate(movedata, match=correct)
# The number of initiated sessions
sessions <- max(timestampdata$index, na.rm=TRUE) + sum(is.na(vpndata$index))
# Merged participant data
participantdata <- data.frame(
index = 1:sessions,
autocondition = rep_len(c("wlin", "wlout", "wnol", "wnola", "moonsq", "wnolfs"), sessions))
r1 = match(participantdata$index, success[,2])
participantdata$resultfile <- success[r1, 6]
participantdata$condition <- success[r1, 3]
participantdata$solver <- success[r1, 4]
participantdata$wentback <- success[r1, 5]
r2 <- match(participantdata$index, vpndata$index)
participantdata$manual_ID <- vpndata$ID[r2]
participantdata$manual_age <- vpndata$age[r2]
participantdata$manual_sex <- vpndata$sex[r2]
participantdata$vision <- vpndata$vision[r2]
participantdata$colorblindness <- ifelse(vpndata$colorblindness[r2]=="not color blind", FALSE, TRUE)
r3 <- match(participantdata$index, surveydata$index)
participantdata$goal <- surveydata$goal[r3]
participantdata$rule <- surveydata$rule[r3]
participantdata$aha <- ifelse(surveydata$aha[r3]=="yes aha", TRUE, FALSE)
participantdata$difficulty <- surveydata$difficulty[r3]
participantdata$comments <- surveydata$comments[r3]
r4 <- match(participantdata$manual_ID, prolificdata$participant_id)
participantdata$session_id <- prolificdata$session_id[r4]
participantdata$prolific_ID <- prolificdata$participant_id[r4]
participantdata$status <- prolificdata$status[r4]
participantdata$started_datetime <- prolificdata$started_datetime[r4]
participantdata$completed_date_time <- prolificdata$completed_date_time[r4]
participantdata$time_taken <- prolificdata$time_taken[r4]
participantdata$prolific_age <- prolificdata$age[r4]
participantdata$num_approvals <- prolificdata$num_approvals[r4]
participantdata$num_rejections <- prolificdata$num_rejections[r4]
participantdata$prolific_score <- prolificdata$prolific_score[r4]
participantdata$reviewed_at_datetime <- prolificdata$reviewed_at_datetime[r4]
participantdata$entered_code <- prolificdata$entered_code[r4]
participantdata$country_of_birth <- prolificdata$Country.of.Birth[r4]
participantdata$current_country_of_residence <- prolificdata$Current.Country.of.Residence[r4]
participantdata$employment_status <- prolificdata$Employment.Status[r4]
participantdata$first_language_1 <- prolificdata$First.Language_1[r4]
participantdata$first_language_2 <- prolificdata$First.language_2[r4]
participantdata$nationality <- prolificdata$Nationality[r4]
participantdata$prolific_sex <- prolificdata$Sex[r4]
participantdata$student_status <- prolificdata$StudentStatus[r4]
r5 <- match(participantdata$index, sum_movedata$index)
participantdata$nbof_moves <- sum_movedata$Nbof_moves[r5]
participantdata$mean_move_time <- sum_movedata$Mean_move_time[r5]
participantdata$mean_total_time <- sum_movedata$Mean_total_time[r5]
participantdata$mean_thinking_time <- sum_movedata$Mean_thinking_time[r5]
participantdata$task_time <- sum_movedata$Task_time[r5]
# Exclude invalid cases, pay the rest of the participants
all_participantdata <- participantdata
participantdata <- all_participantdata %>%
filter(is.na(resultfile)==FALSE) %>% # who did not start the game
filter(wentback==FALSE) %>% # who went back to the instructions page after making some moves in the game
filter(colorblindness==FALSE) %>% # who checked color-blindness
filter((country_of_birth == "CONSENT REVOKED")==FALSE) %>% # who revoked consent
filter(duplicated(manual_ID)==FALSE) # who played the game 2x (delete all attempts after the 1st)
# who played the game during a pilot based on prolific_ID !!!
# who did not get to survey (quit game early or did not press continue button after timeout) - count these as GAVE UP!!!
gave_up <- filter(participantdata, is.na(aha))
participantdata <- filter(participantdata, is.na(aha)==FALSE)
# any other criteria based on timestamps?
all_timestampdata <- arrange(timestampdata, index)
timestampdata <- timestampdata %>%
filter(is.element(index, participantdata$index)) %>%
arrange(index, timestamp)
all_prolificdata <- prolificdata
prolificdata <- prolificdata %>%
filter(is.element(participant_id, participantdata$manual_ID)) %>%
arrange(participant_id)
all_movedata <- movedata
movedata <- movedata %>%
filter(is.element(index, participantdata$index)) %>%
arrange(index)
partic_groups <- participantdata %>%
group_by(condition) %>%
summarize(
Nbof_participants = n_distinct(index),
Nbof_solvers = sum(solver),
Solution_rate = Nbof_solvers/Nbof_participants,
Avg_task_time = mean(task_time),
Avg_nbof_moves = mean(nbof_moves)
)
View(movedata)
partic_groups <- participantdata %>%
group_by(condition) %>%
summarize(
Nbof_participants = n_distinct(index),
Nbof_solvers = sum(solver),
Solution_rate = Nbof_solvers/Nbof_participants,
Avg_task_time = mean(task_time),
Avg_nbof_moves = mean(nbof_moves)
)
for (i in participantdata$index){
P <- filter(participantdata,index==i)
M <- filter(movedata, index==i)
plot(M$timestamp, M$match)
title(c(P$index, P$condition[], P$Solver))
}
