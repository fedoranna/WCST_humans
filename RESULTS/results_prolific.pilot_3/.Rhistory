if (yourdata$Do_you_breast_feed_your_baby_until_he_falls_asleep =="Yes"){
PCHRF[1, "feeding"] <- "C"
} else {
PCHRF[1, "feeding"] <- "A"
}
if (yourdata$Do_you_rock_your_baby_until_he_falls_asleep=="Yes"){
PCHRF[1, "rocking"] <- "C"
} else {
PCHRF[1, "rocking"] <- "A"
}
}
if (yourdata$Where_is_your_baby_at_the_moment_of_falling_asleep_Is_he_in_your_arms_e_g_you_are_sitting_in_a_chair_holding_him_maybe_feeding_him_or_you_are_standing_and_holding_him_maybe_rocking_him_or_is_he_in_a_bed_cot_bassinet_family_bed_even_rocker_bouncer_etc=="In a bed"){
PCHRF[1, "rocking"] <- "A"
if (yourdata$While_your_baby_lies_in_the_bed_do_you_have_continuous_physical_contact_with_him_until_he_falls_asleep_e_g_you_lie_next_to_him_breastfeed_him_or_he_lies_in_his_cot_but_you_stroke_his_hair_or_pat_his_back=="Yes"){
PCHRF[1, "presence"] <- "C"
PCHRF[1, "contact"] <- "C"
PCHRF[1, "holding"] <- "A"
if (yourdata$Do_you_breast_feed_your_baby_until_he_falls_asleep_1=="Yes"){
PCHRF[1, "feeding"] <- "C"
} else {
PCHRF[1, "feeding"] <- "A"
}
} else {
PCHRF[1, "feeding"] <- "A"
if (yourdata$Do_you_stay_in_the_room_until_your_baby_falls_asleep_and_maybe_even_longer=="Yes"){
PCHRF[1, "presence"] <- "C"
if (yourdata$Do_you_sometimes_stroke_or_pat_your_baby_or_put_your_hand_on_his_back_if_he_fusses_or_cries_without_picking_him_up=="Yes"){
PCHRF[1, "contact"] <- "I"
} else {
PCHRF[1, "contact"] <- "A"
}
if (yourdata$Do_you_sometimes_pick_you_baby_up_if_he_fusses_or_cries=="Yes"){
PCHRF[1, "holding"] <- "I"
if (yourdata$Do_you_sometimes_stroke_or_pat_your_baby_or_put_your_hand_on_his_back_if_he_fusses_or_cries_without_picking_him_up=="Yes"){
PCHRF[1, "contact"] <- "I"
} else {
PCHRF[1, "contact"] <- "A"
}
if (yourdata$Do_you_sometimes_pick_you_baby_up_if_he_fusses_or_cries=="Yes"){
PCHRF[1, "holding"] <- "I"
} else {
PCHRF[1, "holding"] <- "A"
}
} else {
PCHRF[1, "holding"] <- "A"
}
} else {
if (yourdata$Do_you_go_back_to_the_room_a_few_times_if_your_baby_fusses_or_cries=="Yes"){
PCHRF[1, "presence"] <- "I"
} else {
PCHRF[1, "presence"] <- "A"
}
}
}
}
if (yourdata$Do_you_transfer_your_baby_to_somewhere_else_after_he_falls_asleep=="No, the baby stays where he falls asleep."){
transfer <- "FALSE"
} else {transfer <- "TRUE"}
for (i in 1:nrow(codetable)){
if (sum(codetable[i,1:5]==PCHRF)==5){
index<-i
}
}
names(yourdata)
2.6/3.3
1.3/3.3
1.4*3.3
0.4*3.3
0.1*3.3
library(knitr)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
"simple"
dt
"format=html"
kable(dt, format="html")
"format=latex"
kable(dt, format="latex")
"format=default"
kable(dt)
names(dt)
names(dt)[1]
# PACKAGES
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/results_prolific.pilot_3/"
# Read data from common files
setwd(datadir)
vpndata <- read.table(paste(datadir, "vpn.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("index", "ID", "age", "sex", "vision", "colorblindness"))
surveydata <- read.table(paste(datadir, "survey.txt", sep=""),
header = FALSE, sep = "|", fill=TRUE,  quote = "",
col.names = c("condition", "index", "goal", "rule", "aha", "difficulty", "comments"))
timestampdata <- read.table(paste(datadir, "time.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("condition", "index", "event", "timestamp"))
prolificdata <- read.csv(paste(datadir, "prolific_export.csv", sep=""),
header = TRUE)
# Read data from resultfiles
resultfiles <- list.files(datadir, pattern = "*Results.txt" )
movedata <- c()
success <- data.frame(
order = 1:length(resultfiles),
index = NA,
condition = NA,
solver = NA,
wentback = NA,
resultfile = NA
)
for (i in 1:length(resultfiles))
{
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17)
{
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
}
else {s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3])))
{wentback <- TRUE}
else
{wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
}
colnames(movedata) <- c("condition", "index", "trial", "src_card", "tar_card", "match", "mv_time", "total_time", "timestamp")
# Summarize movedata
sum_movedata <- movedata %>%
group_by(index) %>%
summarize(
Nbof_moves = max(trial),
Mean_move_time = mean(mv_time), #ms
Mean_total_time = mean(total_time), #ms
Mean_thinking_time = Mean_total_time - Mean_move_time, # ms
Task_time = sum(total_time)/1000/60, #min
)
# PACKAGES
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/results_prolific.pilot_3/"
# Read data from common files
setwd(datadir)
vpndata <- read.table(paste(datadir, "vpn.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("index", "ID", "age", "sex", "vision", "colorblindness"))
surveydata <- read.table(paste(datadir, "survey.txt", sep=""),
header = FALSE, sep = "|", fill=TRUE,  quote = "",
col.names = c("condition", "index", "goal", "rule", "aha", "difficulty", "comments"))
timestampdata <- read.table(paste(datadir, "time.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("condition", "index", "event", "timestamp"))
prolificdata <- read.csv(paste(datadir, "prolific_export.csv", sep=""),
header = TRUE)
# Read data from resultfiles
resultfiles <- list.files(datadir, pattern = "*Results.txt" )
movedata <- c()
success <- data.frame(
order = 1:length(resultfiles),
index = NA,
condition = NA,
solver = NA,
wentback = NA,
resultfile = NA
)
for (i in 1:length(resultfiles))
{
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17)
{
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
}
else {s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3])))
{wentback <- TRUE}
else
{wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
}
colnames(movedata) <- c("condition", "index", "trial", "src_card", "tar_card", "match", "mv_time", "total_time", "timestamp")
# Summarize movedata
sum_movedata <- movedata %>%
group_by(index) %>%
summarize(
Nbof_moves = max(trial),
Mean_move_time = mean(mv_time), #ms
Mean_total_time = mean(total_time), #ms
Mean_thinking_time = Mean_total_time - Mean_move_time, # ms
Task_time = sum(total_time)/1000/60, #min
)
## Change $match to logical
correct <- ifelse(movedata$match=="true",TRUE,FALSE)
movedata <- mutate(movedata, match=correct)
# The number of initiated sessions
sessions <- max(timestampdata$index, na.rm=TRUE) + sum(is.na(vpndata$index))
# Merged participant data
participantdata <- data.frame(
index = 1:sessions,
autocondition = rep_len(c("wlin", "wlout", "wnol", "wnola", "moonsq", "wnolfs"), sessions))
r1 = match(participantdata$index, success[,2])
participantdata$resultfile <- success[r1, 6]
participantdata$condition <- success[r1, 3]
participantdata$solver <- success[r1, 4]
participantdata$wentback <- success[r1, 5]
r2 <- match(participantdata$index, vpndata$index)
participantdata$manual_ID <- vpndata$ID[r2]
participantdata$manual_age <- vpndata$age[r2]
participantdata$manual_sex <- vpndata$sex[r2]
participantdata$vision <- vpndata$vision[r2]
participantdata$colorblindness <- ifelse(vpndata$colorblindness[r2]=="not color blind", FALSE, TRUE)
r3 <- match(participantdata$index, surveydata$index)
participantdata$goal <- surveydata$goal[r3]
participantdata$rule <- surveydata$rule[r3]
participantdata$aha <- ifelse(surveydata$aha[r3]=="yes aha", TRUE, FALSE)
participantdata$difficulty <- surveydata$difficulty[r3]
participantdata$comments <- surveydata$comments[r3]
r4 <- match(participantdata$manual_ID, prolificdata$participant_id)
participantdata$session_id <- prolificdata$session_id[r4]
participantdata$prolific_ID <- prolificdata$participant_id[r4]
participantdata$status <- prolificdata$status[r4]
participantdata$started_datetime <- prolificdata$started_datetime[r4]
participantdata$completed_date_time <- prolificdata$completed_date_time[r4]
participantdata$time_taken <- prolificdata$time_taken[r4]
participantdata$prolific_age <- prolificdata$age[r4]
participantdata$num_approvals <- prolificdata$num_approvals[r4]
participantdata$num_rejections <- prolificdata$num_rejections[r4]
participantdata$prolific_score <- prolificdata$prolific_score[r4]
participantdata$reviewed_at_datetime <- prolificdata$reviewed_at_datetime[r4]
participantdata$entered_code <- prolificdata$entered_code[r4]
participantdata$country_of_birth <- prolificdata$Country.of.Birth[r4]
participantdata$current_country_of_residence <- prolificdata$Current.Country.of.Residence[r4]
participantdata$employment_status <- prolificdata$Employment.Status[r4]
participantdata$first_language_1 <- prolificdata$First.Language_1[r4]
participantdata$first_language_2 <- prolificdata$First.language_2[r4]
participantdata$nationality <- prolificdata$Nationality[r4]
participantdata$prolific_sex <- prolificdata$Sex[r4]
participantdata$student_status <- prolificdata$StudentStatus[r4]
r5 <- match(participantdata$index, sum_movedata$index)
participantdata$nbof_moves <- sum_movedata$Nbof_moves[r5]
participantdata$mean_move_time <- sum_movedata$Mean_move_time[r5]
participantdata$mean_total_time <- sum_movedata$Mean_total_time[r5]
participantdata$mean_thinking_time <- sum_movedata$Mean_thinking_time[r5]
participantdata$task_time <- sum_movedata$Task_time[r5]
# Exclude invalid cases, pay the rest of the participants
all_participantdata <- participantdata
participantdata <- all_participantdata %>%
filter(is.na(resultfile)==FALSE) %>% # who did not start the game
filter(wentback==FALSE) %>% # who went back to the instructions page after making some moves in the game
filter(colorblindness==FALSE) %>% # who checked color-blindness
filter((country_of_birth == "CONSENT REVOKED")==FALSE) %>% # who revoked consent
filter(duplicated(manual_ID)==FALSE) # who played the game 2x (delete all attempts after the 1st)
# who played the game during a pilot based on prolific_ID !!!
# who did not get to survey (quit game early or did not press continue button after timeout) - count these as GAVE UP!!!
gave_up <- filter(participantdata, is.na(aha))
participantdata <- filter(participantdata, is.na(aha)==FALSE)
# any other criteria based on timestamps?
all_timestampdata <- arrange(timestampdata, index)
timestampdata <- timestampdata %>%
filter(is.element(index, participantdata$index)) %>%
arrange(index, timestamp)
all_prolificdata <- prolificdata
prolificdata <- prolificdata %>%
filter(is.element(participant_id, participantdata$manual_ID)) %>%
arrange(participant_id)
all_movedata <- movedata
movedata <- movedata %>%
filter(is.element(index, participantdata$index)) %>%
arrange(index)
partic_groups <- participantdata %>%
group_by(condition) %>%
summarize(
Nbof_participants = n_distinct(index),
Nbof_solvers = sum(solver),
Solution_rate = Nbof_solvers/Nbof_participants,
Avg_task_time = mean(task_time),
Avg_nbof_moves = mean(nbof_moves)
)
partic_groups
View(all_participantdata)
for (i in participantdata$ID){
summarydata <- filter(participantdata,ID==i)
movedata <- filter(alldata, ID==i)
plot(movedata$timestamp, movedata$match)
title(c(summarydata$ID, summarydata$Condition[], summarydata$Task_time/60, summarydata$Solver))
}
sort(personaldata$ID)
participantdata
length(personaldata$ID)
nrow(participantdata)
for (i in participantdata$ID){
summarydata <- filter(participantdata,ID==i)
movedata <- filter(alldata, ID==i)
plot(movedata$timestamp, movedata$match)
title(c(summarydata$ID, summarydata$Condition[], summarydata$Task_time/60, summarydata$Solver))
}
sort(participantdata$ID)
participantdata
length(participantdata$ID)
nrow(participantdata)
names(participantdata)
View(participantdata)
for (i in participantdata$index){
summarydata <- filter(participantdata,index==i)
movedata <- filter(movedata, index==i)
plot(movedata$timestamp, movedata$match)
title(c(summarydata$index, summarydata$condition[], summarydata$Task_time/60, summarydata$Solver))
}
i
summarydata
View(summarydata)
movedata
# Chunk 1: setup
# PACKAGES
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(stringdist)
library(reshape2)
library(ggplot2)
# Chunk 2: Read data
# Parameters
rm(list = ls()) # clear workspace
datadir = "C:/Users/fedor/OneDrive/Documents/R/WCST_humans/RESULTS/results_prolific.pilot_3/"
# Read data from common files
setwd(datadir)
vpndata <- read.table(paste(datadir, "vpn.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("index", "ID", "age", "sex", "vision", "colorblindness"))
surveydata <- read.table(paste(datadir, "survey.txt", sep=""),
header = FALSE, sep = "|", fill=TRUE,  quote = "",
col.names = c("condition", "index", "goal", "rule", "aha", "difficulty", "comments"))
timestampdata <- read.table(paste(datadir, "time.txt", sep=""),
header = FALSE, sep = ",",
col.names = c("condition", "index", "event", "timestamp"))
prolificdata <- read.csv(paste(datadir, "prolific_export.csv", sep=""),
header = TRUE)
# Read data from resultfiles
resultfiles <- list.files(datadir, pattern = "*Results.txt" )
movedata <- c()
success <- data.frame(
order = 1:length(resultfiles),
index = NA,
condition = NA,
solver = NA,
wentback = NA,
resultfile = NA
)
for (i in 1:length(resultfiles))
{
print(resultfiles[i])
d <- read.table(paste(datadir, resultfiles[i], sep=""), header = FALSE, sep = ",")
# Solved the task?
if (nrow(d)>17)
{
s <- sum(d[(nrow(d)-17):nrow(d), 6]=="true") == 18
}
else {s <- FALSE}
# Refreshed game or used back button?
if (length(d[,3]) > length(unique(d[,3])))
{wentback <- TRUE}
else
{wentback <- FALSE}
movedata <- rbind(movedata, d)
success[i,"index"] <- d[1,2]
success[i,"condition"] <- as.character(d[1,1])
success[i,"solver"] <- s
success[i,"wentback"] <- wentback
success[i,"resultfile"] <- resultfiles[i]
}
colnames(movedata) <- c("condition", "index", "trial", "src_card", "tar_card", "match", "mv_time", "total_time", "timestamp")
# Summarize movedata
sum_movedata <- movedata %>%
group_by(index) %>%
summarize(
Nbof_moves = max(trial),
Mean_move_time = mean(mv_time), #ms
Mean_total_time = mean(total_time), #ms
Mean_thinking_time = Mean_total_time - Mean_move_time, # ms
Task_time = sum(total_time)/1000/60, #min
)
# Chunk 3: Modify and merge data frames
## Change $match to logical
correct <- ifelse(movedata$match=="true",TRUE,FALSE)
movedata <- mutate(movedata, match=correct)
# The number of initiated sessions
sessions <- max(timestampdata$index, na.rm=TRUE) + sum(is.na(vpndata$index))
# Merged participant data
participantdata <- data.frame(
index = 1:sessions,
autocondition = rep_len(c("wlin", "wlout", "wnol", "wnola", "moonsq", "wnolfs"), sessions))
r1 = match(participantdata$index, success[,2])
participantdata$resultfile <- success[r1, 6]
participantdata$condition <- success[r1, 3]
participantdata$solver <- success[r1, 4]
participantdata$wentback <- success[r1, 5]
r2 <- match(participantdata$index, vpndata$index)
participantdata$manual_ID <- vpndata$ID[r2]
participantdata$manual_age <- vpndata$age[r2]
participantdata$manual_sex <- vpndata$sex[r2]
participantdata$vision <- vpndata$vision[r2]
participantdata$colorblindness <- ifelse(vpndata$colorblindness[r2]=="not color blind", FALSE, TRUE)
r3 <- match(participantdata$index, surveydata$index)
participantdata$goal <- surveydata$goal[r3]
participantdata$rule <- surveydata$rule[r3]
participantdata$aha <- ifelse(surveydata$aha[r3]=="yes aha", TRUE, FALSE)
participantdata$difficulty <- surveydata$difficulty[r3]
participantdata$comments <- surveydata$comments[r3]
r4 <- match(participantdata$manual_ID, prolificdata$participant_id)
participantdata$session_id <- prolificdata$session_id[r4]
participantdata$prolific_ID <- prolificdata$participant_id[r4]
participantdata$status <- prolificdata$status[r4]
participantdata$started_datetime <- prolificdata$started_datetime[r4]
participantdata$completed_date_time <- prolificdata$completed_date_time[r4]
participantdata$time_taken <- prolificdata$time_taken[r4]
participantdata$prolific_age <- prolificdata$age[r4]
participantdata$num_approvals <- prolificdata$num_approvals[r4]
participantdata$num_rejections <- prolificdata$num_rejections[r4]
participantdata$prolific_score <- prolificdata$prolific_score[r4]
participantdata$reviewed_at_datetime <- prolificdata$reviewed_at_datetime[r4]
participantdata$entered_code <- prolificdata$entered_code[r4]
participantdata$country_of_birth <- prolificdata$Country.of.Birth[r4]
participantdata$current_country_of_residence <- prolificdata$Current.Country.of.Residence[r4]
participantdata$employment_status <- prolificdata$Employment.Status[r4]
participantdata$first_language_1 <- prolificdata$First.Language_1[r4]
participantdata$first_language_2 <- prolificdata$First.language_2[r4]
participantdata$nationality <- prolificdata$Nationality[r4]
participantdata$prolific_sex <- prolificdata$Sex[r4]
participantdata$student_status <- prolificdata$StudentStatus[r4]
r5 <- match(participantdata$index, sum_movedata$index)
participantdata$nbof_moves <- sum_movedata$Nbof_moves[r5]
participantdata$mean_move_time <- sum_movedata$Mean_move_time[r5]
participantdata$mean_total_time <- sum_movedata$Mean_total_time[r5]
participantdata$mean_thinking_time <- sum_movedata$Mean_thinking_time[r5]
participantdata$task_time <- sum_movedata$Task_time[r5]
# Chunk 4: Exclude participants
# Exclude invalid cases, pay the rest of the participants
all_participantdata <- participantdata
participantdata <- all_participantdata %>%
filter(is.na(resultfile)==FALSE) %>% # who did not start the game
filter(wentback==FALSE) %>% # who went back to the instructions page after making some moves in the game
filter(colorblindness==FALSE) %>% # who checked color-blindness
filter((country_of_birth == "CONSENT REVOKED")==FALSE) %>% # who revoked consent
filter(duplicated(manual_ID)==FALSE) # who played the game 2x (delete all attempts after the 1st)
# who played the game during a pilot based on prolific_ID !!!
# who did not get to survey (quit game early or did not press continue button after timeout) - count these as GAVE UP!!!
gave_up <- filter(participantdata, is.na(aha))
participantdata <- filter(participantdata, is.na(aha)==FALSE)
# any other criteria based on timestamps?
all_timestampdata <- arrange(timestampdata, index)
timestampdata <- timestampdata %>%
filter(is.element(index, participantdata$index)) %>%
arrange(index, timestamp)
all_prolificdata <- prolificdata
prolificdata <- prolificdata %>%
filter(is.element(participant_id, participantdata$manual_ID)) %>%
arrange(participant_id)
all_movedata <- movedata
movedata <- movedata %>%
filter(is.element(index, participantdata$index)) %>%
arrange(index)
# Chunk 5
partic_groups <- participantdata %>%
group_by(condition) %>%
summarize(
Nbof_participants = n_distinct(index),
Nbof_solvers = sum(solver),
Solution_rate = Nbof_solvers/Nbof_participants,
Avg_task_time = mean(task_time),
Avg_nbof_moves = mean(nbof_moves)
)
for (i in participantdata$index){
P <- filter(participantdata,index==i)
M <- filter(movedata, index==i)
plot(M$timestamp, M$match)
title(c(P$index, P$condition[], P$Solver))
}
for (i in participantdata$index){
P <- filter(participantdata,index==i)
M <- filter(movedata, index==i)
plot(M$timestamp, M$match)
title(c(P$index, P$condition[], P$Solver))
}
for (i in participantdata$index){
P <- filter(participantdata,index==i)
M <- filter(movedata, index==i)
plot(M$timestamp, M$match)
title(c(P$index, P$condition[], P$Solver))
}
sort(participantdata$prolific_ID)
